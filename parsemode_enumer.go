// Code generated by "enumer -type=parseMode -linecomment"; DO NOT EDIT.

package main

import (
	"fmt"
	"strings"
)

const _parseModeName = "UNSPECIFIEDFALLBACKNO_MEMEFISHMEMEFISH_ONLY"

var _parseModeIndex = [...]uint8{0, 11, 19, 30, 43}

const _parseModeLowerName = "unspecifiedfallbackno_memefishmemefish_only"

func (i parseMode) String() string {
	if i < 0 || i >= parseMode(len(_parseModeIndex)-1) {
		return fmt.Sprintf("parseMode(%d)", i)
	}
	return _parseModeName[_parseModeIndex[i]:_parseModeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _parseModeNoOp() {
	var x [1]struct{}
	_ = x[parseModeUnspecified-(0)]
	_ = x[parseModeFallback-(1)]
	_ = x[parseModeNoMemefish-(2)]
	_ = x[parseMemefishOnly-(3)]
}

var _parseModeValues = []parseMode{parseModeUnspecified, parseModeFallback, parseModeNoMemefish, parseMemefishOnly}

var _parseModeNameToValueMap = map[string]parseMode{
	_parseModeName[0:11]:       parseModeUnspecified,
	_parseModeLowerName[0:11]:  parseModeUnspecified,
	_parseModeName[11:19]:      parseModeFallback,
	_parseModeLowerName[11:19]: parseModeFallback,
	_parseModeName[19:30]:      parseModeNoMemefish,
	_parseModeLowerName[19:30]: parseModeNoMemefish,
	_parseModeName[30:43]:      parseMemefishOnly,
	_parseModeLowerName[30:43]: parseMemefishOnly,
}

var _parseModeNames = []string{
	_parseModeName[0:11],
	_parseModeName[11:19],
	_parseModeName[19:30],
	_parseModeName[30:43],
}

// parseModeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func parseModeString(s string) (parseMode, error) {
	if val, ok := _parseModeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _parseModeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to parseMode values", s)
}

// parseModeValues returns all values of the enum
func parseModeValues() []parseMode {
	return _parseModeValues
}

// parseModeStrings returns a slice of all String values of the enum
func parseModeStrings() []string {
	strs := make([]string, len(_parseModeNames))
	copy(strs, _parseModeNames)
	return strs
}

// IsAparseMode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i parseMode) IsAparseMode() bool {
	for _, v := range _parseModeValues {
		if i == v {
			return true
		}
	}
	return false
}
