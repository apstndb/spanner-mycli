// Code generated by sysvargen; DO NOT EDIT.

package main

import (
	"time"

	"github.com/apstndb/spanner-mycli/internal/parser/sysvar"
	"github.com/samber/lo"

	"cloud.google.com/go/spanner/admin/database/apiv1/databasepb"
	sppb "cloud.google.com/go/spanner/apiv1/spannerpb"
)

// Silence unused import warnings
var (
	_ = time.Time{}
	_ = sysvar.Registry{}
	_ = lo.ToPtr[any]
	_ = databasepb.DatabaseDialect(0)
	_ = sppb.RequestOptions_Priority(0)
)

// registerGeneratedVariables registers system variables defined by struct tags.
// This function is generated from systemVariables struct tags.
func registerGeneratedVariables(registry *sysvar.Registry, sv *systemVariables) {

	// AUTO_PARTITION_MODE: A property of type BOOL indicating whether the connection automatically uses partitioned queries for all queries that are executed.

	mustRegister(registry, sysvar.NewBooleanParser(
		"AUTO_PARTITION_MODE",
		"A property of type BOOL indicating whether the connection automatically uses partitioned queries for all queries that are executed.",
		sysvar.GetValue(&sv.AutoPartitionMode),
		sysvar.SetValue(&sv.AutoPartitionMode),
	))

	// RPC_PRIORITY: A property of type STRING indicating the relative priority for Spanner requests. The priority acts as a hint to the Spanner scheduler and doesn't guarantee order of execution.

	sysvar.RegisterProtobufEnum(registry,
		"RPC_PRIORITY",
		"A property of type STRING indicating the relative priority for Spanner requests. The priority acts as a hint to the Spanner scheduler and doesn't guarantee order of execution.",
		sppb.RequestOptions_Priority_value,
		"PRIORITY_",
		sysvar.GetValue(&sv.RPCPriority),
		sysvar.SetValue(&sv.RPCPriority),
	)

	// READ_TIMESTAMP: The read timestamp of the most recent read-only transaction.

	mustRegister(registry, sysvar.NewReadOnlyStringParser(
		"READ_TIMESTAMP",
		"The read timestamp of the most recent read-only transaction.",
		sv.formatReadTimestamp,
	))

	// OPTIMIZER_VERSION: A property of type STRING indicating the optimizer version. The version is either an integer string or LATEST.

	mustRegister(registry, sysvar.NewStringVariableParser(
		"OPTIMIZER_VERSION",
		"A property of type STRING indicating the optimizer version. The version is either an integer string or LATEST.",
		sysvar.GetValue(&sv.OptimizerVersion),
		sysvar.SetValue(&sv.OptimizerVersion),
	))

	// OPTIMIZER_STATISTICS_PACKAGE: A property of type STRING indicating the current optimizer statistics package that is used by this connection.

	mustRegister(registry, sysvar.NewStringVariableParser(
		"OPTIMIZER_STATISTICS_PACKAGE",
		"A property of type STRING indicating the current optimizer statistics package that is used by this connection.",
		sysvar.GetValue(&sv.OptimizerStatisticsPackage),
		sysvar.SetValue(&sv.OptimizerStatisticsPackage),
	))

	// COMMIT_TIMESTAMP: The commit timestamp of the last read-write transaction that Spanner committed.

	mustRegister(registry, sysvar.NewReadOnlyStringParser(
		"COMMIT_TIMESTAMP",
		"The commit timestamp of the last read-write transaction that Spanner committed.",
		sv.formatCommitTimestamp,
	))

	// TRANSACTION_TAG: A property of type STRING that contains the transaction tag for the next transaction.

	mustRegister(registry, sysvar.NewStringVariableParser(
		"TRANSACTION_TAG",
		"A property of type STRING that contains the transaction tag for the next transaction.",
		sysvar.GetValue(&sv.TransactionTag),
		sysvar.SetValue(&sv.TransactionTag),
	))

	// STATEMENT_TAG: A property of type STRING that contains the request tag for the next statement.

	mustRegister(registry, sysvar.NewStringVariableParser(
		"STATEMENT_TAG",
		"A property of type STRING that contains the request tag for the next statement.",
		sysvar.GetValue(&sv.RequestTag),
		sysvar.SetValue(&sv.RequestTag),
	))

	// READONLY: A boolean indicating whether or not the connection is in read-only mode. The default is false.

	mustRegister(registry, sysvar.NewBooleanParser(
		"READONLY",
		"A boolean indicating whether or not the connection is in read-only mode. The default is false.",
		sysvar.GetValue(&sv.ReadOnly),
		sv.setReadOnly,
	))

	// DATA_BOOST_ENABLED: A property of type BOOL indicating whether this connection should use Data Boost for partitioned queries. The default is false.

	mustRegister(registry, sysvar.NewBooleanParser(
		"DATA_BOOST_ENABLED",
		"A property of type BOOL indicating whether this connection should use Data Boost for partitioned queries. The default is false.",
		sysvar.GetValue(&sv.DataBoostEnabled),
		sysvar.SetValue(&sv.DataBoostEnabled),
	))

	// AUTO_BATCH_DML: A property of type BOOL indicating whether the DML is executed immediately or begins a batch DML. The default is false.

	mustRegister(registry, sysvar.NewBooleanParser(
		"AUTO_BATCH_DML",
		"A property of type BOOL indicating whether the DML is executed immediately or begins a batch DML. The default is false.",
		sysvar.GetValue(&sv.AutoBatchDML),
		sysvar.SetValue(&sv.AutoBatchDML),
	))

	// EXCLUDE_TXN_FROM_CHANGE_STREAMS: Controls whether to exclude recording modifications in current transaction from the allowed tracking change streams(with DDL option allow_txn_exclusion=true).

	mustRegister(registry, sysvar.NewBooleanParser(
		"EXCLUDE_TXN_FROM_CHANGE_STREAMS",
		"Controls whether to exclude recording modifications in current transaction from the allowed tracking change streams(with DDL option allow_txn_exclusion=true).",
		sysvar.GetValue(&sv.ExcludeTxnFromChangeStreams),
		sysvar.SetValue(&sv.ExcludeTxnFromChangeStreams),
	))

	// MAX_COMMIT_DELAY: The amount of latency this request is configured to incur in order to improve throughput. You can specify it as duration between 0 and 500ms.

	mustRegister(registry, sysvar.NewNullableDurationVariableParser(
		"MAX_COMMIT_DELAY",
		"The amount of latency this request is configured to incur in order to improve throughput. You can specify it as duration between 0 and 500ms.",
		sysvar.GetValue(&sv.MaxCommitDelay),
		sysvar.SetValue(&sv.MaxCommitDelay),
		lo.ToPtr(time.Duration(0)), lo.ToPtr(500*time.Millisecond),
	))

	// MAX_PARTITIONED_PARALLELISM: A property of type INT64 indicating the number of worker threads the spanner-mycli uses to execute partitions. This value is used for AUTO_PARTITION_MODE=TRUE and RUN PARTITIONED QUERY

	mustRegister(registry, sysvar.NewIntegerVariableParser(
		"MAX_PARTITIONED_PARALLELISM",
		"A property of type INT64 indicating the number of worker threads the spanner-mycli uses to execute partitions. This value is used for AUTO_PARTITION_MODE=TRUE and RUN PARTITIONED QUERY",
		sysvar.GetValue(&sv.MaxPartitionedParallelism),
		sysvar.SetValue(&sv.MaxPartitionedParallelism),
		nil, nil,
	))

	// STATEMENT_TIMEOUT: A property of type STRING indicating the current timeout value for statements (e.g., 10s, 5m, 1h). Default is 10m.

	mustRegister(registry, sysvar.NewNullableDurationVariableParser(
		"STATEMENT_TIMEOUT",
		"A property of type STRING indicating the current timeout value for statements (e.g., 10s, 5m, 1h). Default is 10m.",
		sysvar.GetValue(&sv.StatementTimeout),
		sysvar.SetValue(&sv.StatementTimeout),
		lo.ToPtr(time.Duration(0)), nil,
	))

	// RETURN_COMMIT_STATS: A property of type BOOL indicating whether statistics should be returned for transactions on this connection.

	mustRegister(registry, sysvar.NewBooleanParser(
		"RETURN_COMMIT_STATS",
		"A property of type BOOL indicating whether statistics should be returned for transactions on this connection.",
		sysvar.GetValue(&sv.ReturnCommitStats),
		sysvar.SetValue(&sv.ReturnCommitStats),
	))

	// DEFAULT_ISOLATION_LEVEL: The transaction isolation level that is used by default for read/write transactions.

	sysvar.RegisterProtobufEnumWithAliases(registry,
		"DEFAULT_ISOLATION_LEVEL",
		"The transaction isolation level that is used by default for read/write transactions.",
		sppb.TransactionOptions_IsolationLevel_value,
		"ISOLATION_LEVEL_",
		sysvar.GetValue(&sv.DefaultIsolationLevel),
		sysvar.SetValue(&sv.DefaultIsolationLevel),
		map[sppb.TransactionOptions_IsolationLevel][]string{sppb.TransactionOptions_ISOLATION_LEVEL_UNSPECIFIED: {"UNSPECIFIED"}},
	)

	// CLI_PROJECT: GCP Project ID.

	mustRegister(registry, sysvar.NewReadOnlyStringParser(
		"CLI_PROJECT",
		"GCP Project ID.",
		sysvar.GetValue(&sv.Project),
	))

	// CLI_INSTANCE: Cloud Spanner instance ID.

	mustRegister(registry, sysvar.NewReadOnlyStringParser(
		"CLI_INSTANCE",
		"Cloud Spanner instance ID.",
		sysvar.GetValue(&sv.Instance),
	))

	// CLI_DATABASE: Cloud Spanner database ID.

	mustRegister(registry, sysvar.NewReadOnlyStringParser(
		"CLI_DATABASE",
		"Cloud Spanner database ID.",
		sysvar.GetValue(&sv.Database),
	))

	// CLI_VERBOSE: Display verbose output.

	mustRegister(registry, sysvar.NewBooleanParser(
		"CLI_VERBOSE",
		"Display verbose output.",
		sysvar.GetValue(&sv.Verbose),
		sysvar.SetValue(&sv.Verbose),
	))

	// CLI_PROMPT: Custom prompt for spanner-mycli.

	mustRegister(registry, sysvar.NewStringVariableParser(
		"CLI_PROMPT",
		"Custom prompt for spanner-mycli.",
		sysvar.GetValue(&sv.Prompt),
		sysvar.SetValue(&sv.Prompt),
	))

	// CLI_PROMPT2: Custom continuation prompt for spanner-mycli.

	mustRegister(registry, sysvar.NewStringVariableParser(
		"CLI_PROMPT2",
		"Custom continuation prompt for spanner-mycli.",
		sysvar.GetValue(&sv.Prompt2),
		sv.setPrompt2,
	))

	// CLI_HISTORY_FILE: Path to the history file.

	mustRegister(registry, sysvar.NewReadOnlyStringParser(
		"CLI_HISTORY_FILE",
		"Path to the history file.",
		sysvar.GetValue(&sv.HistoryFile),
	))

	// CLI_INSECURE: Skip TLS certificate verification (insecure).

	mustRegister(registry, sysvar.NewReadOnlyBooleanParser(
		"CLI_INSECURE",
		"Skip TLS certificate verification (insecure).",
		sysvar.GetValue(&sv.Insecure),
	))

	// CLI_LOG_GRPC: Enable gRPC logging.

	mustRegister(registry, sysvar.NewReadOnlyBooleanParser(
		"CLI_LOG_GRPC",
		"Enable gRPC logging.",
		sysvar.GetValue(&sv.LogGrpc),
	))

	// CLI_LINT_PLAN: Enable query plan linting.

	mustRegister(registry, sysvar.NewBooleanParser(
		"CLI_LINT_PLAN",
		"Enable query plan linting.",
		sysvar.GetValue(&sv.LintPlan),
		sysvar.SetValue(&sv.LintPlan),
	))

	// CLI_USE_PAGER: Enable pager for output.

	mustRegister(registry, sysvar.NewBooleanParser(
		"CLI_USE_PAGER",
		"Enable pager for output.",
		sysvar.GetValue(&sv.UsePager),
		sysvar.SetValue(&sv.UsePager),
	))

	// CLI_AUTOWRAP: Enable automatic line wrapping.

	mustRegister(registry, sysvar.NewBooleanParser(
		"CLI_AUTOWRAP",
		"Enable automatic line wrapping.",
		sysvar.GetValue(&sv.AutoWrap),
		sysvar.SetValue(&sv.AutoWrap),
	))

	// CLI_FIXED_WIDTH: If set, limits output width to the specified number of characters. NULL means automatic width detection.

	mustRegister(registry, sysvar.NewNullableIntVariableParser(
		"CLI_FIXED_WIDTH",
		"If set, limits output width to the specified number of characters. NULL means automatic width detection.",
		sysvar.GetValue(&sv.FixedWidth),
		sysvar.SetValue(&sv.FixedWidth),
		nil, nil,
	))

	// CLI_ENABLE_HIGHLIGHT: Enable syntax highlighting.

	mustRegister(registry, sysvar.NewBooleanParser(
		"CLI_ENABLE_HIGHLIGHT",
		"Enable syntax highlighting.",
		sysvar.GetValue(&sv.EnableHighlight),
		sysvar.SetValue(&sv.EnableHighlight),
	))

	// CLI_PROTOTEXT_MULTILINE: Enable multiline prototext output.

	mustRegister(registry, sysvar.NewBooleanParser(
		"CLI_PROTOTEXT_MULTILINE",
		"Enable multiline prototext output.",
		sysvar.GetValue(&sv.MultilineProtoText),
		sysvar.SetValue(&sv.MultilineProtoText),
	))

	// CLI_MARKDOWN_CODEBLOCK: Enable markdown codeblock output.

	mustRegister(registry, sysvar.NewBooleanParser(
		"CLI_MARKDOWN_CODEBLOCK",
		"Enable markdown codeblock output.",
		sysvar.GetValue(&sv.MarkdownCodeblock),
		sysvar.SetValue(&sv.MarkdownCodeblock),
	))

	// CLI_QUERY_MODE: Query execution mode.

	sysvar.RegisterProtobufEnum(registry,
		"CLI_QUERY_MODE",
		"Query execution mode.",
		sppb.ExecuteSqlRequest_QueryMode_value,
		"",
		sv.getQueryMode,
		sv.setQueryMode,
	)

	// CLI_TRY_PARTITION_QUERY: A boolean indicating whether to test query for partition compatibility instead of executing it.

	mustRegister(registry, sysvar.NewBooleanParser(
		"CLI_TRY_PARTITION_QUERY",
		"A boolean indicating whether to test query for partition compatibility instead of executing it.",
		sysvar.GetValue(&sv.TryPartitionQuery),
		sysvar.SetValue(&sv.TryPartitionQuery),
	))

	// CLI_VERTEXAI_PROJECT: Vertex AI project for natural language features.

	mustRegister(registry, sysvar.NewStringVariableParser(
		"CLI_VERTEXAI_PROJECT",
		"Vertex AI project for natural language features.",
		sysvar.GetValue(&sv.VertexAIProject),
		sysvar.SetValue(&sv.VertexAIProject),
	))

	// CLI_VERTEXAI_MODEL: Vertex AI model for natural language features.

	mustRegister(registry, sysvar.NewStringVariableParser(
		"CLI_VERTEXAI_MODEL",
		"Vertex AI model for natural language features.",
		sysvar.GetValue(&sv.VertexAIModel),
		sysvar.SetValue(&sv.VertexAIModel),
	))

	// CLI_DATABASE_DIALECT: Database dialect for the session.

	sysvar.RegisterProtobufEnumWithAliases(registry,
		"CLI_DATABASE_DIALECT",
		"Database dialect for the session.",
		databasepb.DatabaseDialect_value,
		"",
		sysvar.GetValue(&sv.DatabaseDialect),
		sysvar.SetValue(&sv.DatabaseDialect),
		map[databasepb.DatabaseDialect][]string{databasepb.DatabaseDialect_DATABASE_DIALECT_UNSPECIFIED: {""}},
	)

	// CLI_ECHO_EXECUTED_DDL: Echo executed DDL statements.

	mustRegister(registry, sysvar.NewBooleanParser(
		"CLI_ECHO_EXECUTED_DDL",
		"Echo executed DDL statements.",
		sysvar.GetValue(&sv.EchoExecutedDDL),
		sysvar.SetValue(&sv.EchoExecutedDDL),
	))

	// CLI_ROLE: Cloud Spanner database role.

	mustRegister(registry, sysvar.NewReadOnlyStringParser(
		"CLI_ROLE",
		"Cloud Spanner database role.",
		sysvar.GetValue(&sv.Role),
	))

	// CLI_ECHO_INPUT: Echo input statements.

	mustRegister(registry, sysvar.NewBooleanParser(
		"CLI_ECHO_INPUT",
		"Echo input statements.",
		sysvar.GetValue(&sv.EchoInput),
		sysvar.SetValue(&sv.EchoInput),
	))

	// CLI_HOST: Host on which Spanner server is located

	mustRegister(registry, sysvar.NewReadOnlyStringParser(
		"CLI_HOST",
		"Host on which Spanner server is located",
		sysvar.GetValue(&sv.Host),
	))

	// CLI_PORT: Port number for connections.

	mustRegister(registry, sysvar.NewIntegerVariableParser(
		"CLI_PORT",
		"Port number for connections.",
		sv.getPortAsInt64,
		nil,      // No setter - read-only
		nil, nil, // No min/max validation needed for read-only
	))

	// CLI_EMULATOR_PLATFORM: Container platform used by embedded emulator.

	mustRegister(registry, sysvar.NewReadOnlyStringParser(
		"CLI_EMULATOR_PLATFORM",
		"Container platform used by embedded emulator.",
		sysvar.GetValue(&sv.EmulatorPlatform),
	))

	// CLI_TAB_WIDTH: Tab width. It is used for expanding tabs.

	mustRegister(registry, sysvar.NewIntegerVariableParser(
		"CLI_TAB_WIDTH",
		"Tab width. It is used for expanding tabs.",
		sysvar.GetValue(&sv.TabWidth),
		sysvar.SetValue(&sv.TabWidth),
		nil, nil,
	))

	// CLI_EXPLAIN_WRAP_WIDTH: Controls query plan wrap width. It effects only operators column contents

	mustRegister(registry, sysvar.NewIntegerVariableParser(
		"CLI_EXPLAIN_WRAP_WIDTH",
		"Controls query plan wrap width. It effects only operators column contents",
		sysvar.GetValue(&sv.ExplainWrapWidth),
		sysvar.SetValue(&sv.ExplainWrapWidth),
		nil, nil,
	))

	// CLI_AUTO_CONNECT_AFTER_CREATE: A boolean indicating whether to automatically connect to a database after CREATE DATABASE. The default is false.

	mustRegister(registry, sysvar.NewBooleanParser(
		"CLI_AUTO_CONNECT_AFTER_CREATE",
		"A boolean indicating whether to automatically connect to a database after CREATE DATABASE. The default is false.",
		sysvar.GetValue(&sv.AutoConnectAfterCreate),
		sysvar.SetValue(&sv.AutoConnectAfterCreate),
	))

	// CLI_ENABLE_PROGRESS_BAR: A boolean indicating whether to display progress bars during operations. The default is false.

	mustRegister(registry, sysvar.NewBooleanParser(
		"CLI_ENABLE_PROGRESS_BAR",
		"A boolean indicating whether to display progress bars during operations. The default is false.",
		sysvar.GetValue(&sv.EnableProgressBar),
		sysvar.SetValue(&sv.EnableProgressBar),
	))

	// CLI_IMPERSONATE_SERVICE_ACCOUNT: Service account to impersonate.

	mustRegister(registry, sysvar.NewReadOnlyStringParser(
		"CLI_IMPERSONATE_SERVICE_ACCOUNT",
		"Service account to impersonate.",
		sysvar.GetValue(&sv.ImpersonateServiceAccount),
	))

	// CLI_ENABLE_ADC_PLUS: A boolean indicating whether to enable enhanced Application Default Credentials. Must be set before session creation. The default is true.

	mustRegister(registry, sysvar.NewBooleanParser(
		"CLI_ENABLE_ADC_PLUS",
		"A boolean indicating whether to enable enhanced Application Default Credentials. Must be set before session creation. The default is true.",
		sysvar.GetValue(&sv.EnableADCPlus),
		sv.setEnableADCPlus,
	))

	// CLI_MCP: A read-only boolean indicating whether the connection is running as an MCP server.

	mustRegister(registry, sysvar.NewReadOnlyBooleanParser(
		"CLI_MCP",
		"A read-only boolean indicating whether the connection is running as an MCP server.",
		sysvar.GetValue(&sv.MCP),
	))

	// CLI_ASYNC_DDL: A boolean indicating whether DDL statements should be executed asynchronously. The default is false.

	mustRegister(registry, sysvar.NewBooleanParser(
		"CLI_ASYNC_DDL",
		"A boolean indicating whether DDL statements should be executed asynchronously. The default is false.",
		sysvar.GetValue(&sv.AsyncDDL),
		sysvar.SetValue(&sv.AsyncDDL),
	))

	// CLI_SKIP_SYSTEM_COMMAND: Controls whether system commands are disabled.

	mustRegister(registry, sysvar.NewBooleanParser(
		"CLI_SKIP_SYSTEM_COMMAND",
		"Controls whether system commands are disabled.",
		sysvar.GetValue(&sv.SkipSystemCommand),
		sysvar.SetValue(&sv.SkipSystemCommand),
	))

	// CLI_SKIP_COLUMN_NAMES: A boolean indicating whether to suppress column headers in output. The default is false.

	mustRegister(registry, sysvar.NewBooleanParser(
		"CLI_SKIP_COLUMN_NAMES",
		"A boolean indicating whether to suppress column headers in output. The default is false.",
		sysvar.GetValue(&sv.SkipColumnNames),
		sysvar.SetValue(&sv.SkipColumnNames),
	))

	// CLI_VERSION: The version of spanner-mycli.

	// Computed variable with custom getter

	mustRegister(registry, sysvar.NewReadOnlyStringParser(
		"CLI_VERSION",
		"The version of spanner-mycli.",
		sv.getCLIVersion,
	))

	// CLI_CURRENT_WIDTH: Current terminal width. Returns NULL if not connected to a terminal.

	// Computed variable with custom getter

	mustRegister(registry, sysvar.NewReadOnlyStringParser(
		"CLI_CURRENT_WIDTH",
		"Current terminal width. Returns NULL if not connected to a terminal.",
		sv.getCLICurrentWidth,
	))

	// CLI_ENDPOINT: Host and port for connections (host:port format).

	// Computed variable with custom getter/setter

	mustRegister(registry, sysvar.NewStringVariableParser(
		"CLI_ENDPOINT",
		"Host and port for connections (host:port format).",
		sv.getCLIEndpoint,
		sv.setCLIEndpoint,
	))

	// AUTOCOMMIT: A boolean indicating whether or not the connection is in autocommit mode. The default is true.

	mustRegister(registry, createUnimplementedParser(
		"AUTOCOMMIT",
		"A boolean indicating whether or not the connection is in autocommit mode. The default is true.",
	))

	// RETRY_ABORTS_INTERNALLY: A boolean indicating whether the connection automatically retries aborted transactions. The default is true.

	mustRegister(registry, createUnimplementedParser(
		"RETRY_ABORTS_INTERNALLY",
		"A boolean indicating whether the connection automatically retries aborted transactions. The default is true.",
	))

	// CLI_OUTPUT_TEMPLATE_FILE: Go text/template for formatting the output of the CLI.

	// Computed variable with custom getter/setter

	mustRegister(registry, sysvar.NewStringVariableParser(
		"CLI_OUTPUT_TEMPLATE_FILE",
		"Go text/template for formatting the output of the CLI.",
		sv.getCLIOutputTemplateFile,
		sv.setCLIOutputTemplateFile,
	))

}
