// Code generated by "enumer -type=DisplayMode -trimprefix=DisplayMode -transform=snake_upper"; DO NOT EDIT.

package enums

import (
	"fmt"
	"strings"
)

const _DisplayModeName = "TABLETABLE_COMMENTTABLE_DETAIL_COMMENTVERTICALTABHTMLXMLCSV"

var _DisplayModeIndex = [...]uint8{0, 5, 18, 38, 46, 49, 53, 56, 59}

const _DisplayModeLowerName = "tabletable_commenttable_detail_commentverticaltabhtmlxmlcsv"

func (i DisplayMode) String() string {
	if i < 0 || i >= DisplayMode(len(_DisplayModeIndex)-1) {
		return fmt.Sprintf("DisplayMode(%d)", i)
	}
	return _DisplayModeName[_DisplayModeIndex[i]:_DisplayModeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _DisplayModeNoOp() {
	var x [1]struct{}
	_ = x[DisplayModeTable-(0)]
	_ = x[DisplayModeTableComment-(1)]
	_ = x[DisplayModeTableDetailComment-(2)]
	_ = x[DisplayModeVertical-(3)]
	_ = x[DisplayModeTab-(4)]
	_ = x[DisplayModeHTML-(5)]
	_ = x[DisplayModeXML-(6)]
	_ = x[DisplayModeCSV-(7)]
}

var _DisplayModeValues = []DisplayMode{DisplayModeTable, DisplayModeTableComment, DisplayModeTableDetailComment, DisplayModeVertical, DisplayModeTab, DisplayModeHTML, DisplayModeXML, DisplayModeCSV}

var _DisplayModeNameToValueMap = map[string]DisplayMode{
	_DisplayModeName[0:5]:        DisplayModeTable,
	_DisplayModeLowerName[0:5]:   DisplayModeTable,
	_DisplayModeName[5:18]:       DisplayModeTableComment,
	_DisplayModeLowerName[5:18]:  DisplayModeTableComment,
	_DisplayModeName[18:38]:      DisplayModeTableDetailComment,
	_DisplayModeLowerName[18:38]: DisplayModeTableDetailComment,
	_DisplayModeName[38:46]:      DisplayModeVertical,
	_DisplayModeLowerName[38:46]: DisplayModeVertical,
	_DisplayModeName[46:49]:      DisplayModeTab,
	_DisplayModeLowerName[46:49]: DisplayModeTab,
	_DisplayModeName[49:53]:      DisplayModeHTML,
	_DisplayModeLowerName[49:53]: DisplayModeHTML,
	_DisplayModeName[53:56]:      DisplayModeXML,
	_DisplayModeLowerName[53:56]: DisplayModeXML,
	_DisplayModeName[56:59]:      DisplayModeCSV,
	_DisplayModeLowerName[56:59]: DisplayModeCSV,
}

var _DisplayModeNames = []string{
	_DisplayModeName[0:5],
	_DisplayModeName[5:18],
	_DisplayModeName[18:38],
	_DisplayModeName[38:46],
	_DisplayModeName[46:49],
	_DisplayModeName[49:53],
	_DisplayModeName[53:56],
	_DisplayModeName[56:59],
}

// DisplayModeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DisplayModeString(s string) (DisplayMode, error) {
	if val, ok := _DisplayModeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _DisplayModeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to DisplayMode values", s)
}

// DisplayModeValues returns all values of the enum
func DisplayModeValues() []DisplayMode {
	return _DisplayModeValues
}

// DisplayModeStrings returns a slice of all String values of the enum
func DisplayModeStrings() []string {
	strs := make([]string, len(_DisplayModeNames))
	copy(strs, _DisplayModeNames)
	return strs
}

// IsADisplayMode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i DisplayMode) IsADisplayMode() bool {
	for _, v := range _DisplayModeValues {
		if i == v {
			return true
		}
	}
	return false
}
